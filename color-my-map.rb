#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
require 'erb'
require 'nokogiri'
require 'ostruct'
require 'rest-client'
require 'rexml/document'
require 'yaml'

# From https://www.ruby-forum.com/topic/137104
class NestedOpenStruct
    def self.new(hash)
        OpenStruct.new(hash.inject({}){|r,p| r[p[0]] = p[1].kind_of?(Hash) ?  NestedOpenStruct.new(p[1]) : p[1]; r })
    end
end
config = NestedOpenStruct.new(YAML.load_file(File.join(File.dirname(__FILE__), 'config.yaml')))

# Download
puts "Downloading from #{config.svg.url} ..."
doc = Nokogiri::XML(RestClient.get(config.svg.url))

# Insert description and style
desc = doc.create_element('desc', 'World map generated by Color my Map (https://github.com/freayd/color-my-map)')
style = doc.create_element('style', :type => 'text/css')
style.add_child(doc.create_cdata(File.open(config.style.path).read))
doc.at_css('svg').children.first.add_previous_sibling(style).add_previous_sibling(desc)

# Dynamic attributes modifications
config.attributes.marshal_dump.each do |filter, actions|
    doc.search(filter).each do |element|
        actions.scan(/([\w\-]+)\.(set|add|remove)(?:\(([\w\-]+)\))?/).each do |attribute, function, value|
            case function
            when 'set'
                element[attribute] = value
            when 'add'
                element[attribute] ||= ''
                element[attribute] = "#{element[attribute]} #{value}"
            when 'remove'
                element.remove_attribute(attribute)
            end
        end
    end
end

# Write
puts "Writing to #{config.svg.path} ..."
File.open(config.svg.path, 'w') do |file|
    doc = REXML::Document.new(doc.to_xml, :attribute_quote => :quote)
    doc.write(file, config.svg.indent)
end

# REXML bugfix: replace single quotes by double ones in <xml> element
doc = File.open(config.svg.path).read
doc.gsub!(/^<\?xml version='(\d+\.?\d*)' encoding='([\w\-]+)'\?>/, '<?xml version="\1" encoding="\2"?>')
File.open(config.svg.path, 'w') { |file| file << doc }
